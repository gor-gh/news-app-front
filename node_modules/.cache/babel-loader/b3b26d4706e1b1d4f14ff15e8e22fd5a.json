{"ast":null,"code":"var _jsxFileName = \"/home/gor/WebstormProjects/news-app/news-app-front/src/components/ContactForm/ContactForm.js\";\nimport React from 'react';\nimport './ContactForm.css';\nimport { isValidEmail } from \"../../helpers\";\nimport FormField from '../FormField/FormField';\nimport Loading from '../Loading/Loading';\n\nclass ContactForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      _isLoading: false,\n      fields: {\n        name: '',\n        email: '',\n        message: ''\n      },\n      fieldErrors: {}\n    };\n\n    this.onFormSubmit = e => {\n      e.preventDefault();\n      const randTime = Math.floor(Math.random() * 1001) + 1000;\n      this.setState({\n        _isLoading: true\n      }, () => {\n        setTimeout(() => {\n          this.setState({\n            _isLoading: false\n          }, () => {\n            this.props.closeModal();\n          });\n        }, randTime);\n      });\n    };\n\n    this.onInputChange = ({\n      name,\n      value,\n      error\n    }) => {\n      const data = Object.assign({}, this.state.fields);\n      const dataErrors = Object.assign({}, this.state.fieldErrors);\n      data[name] = value;\n      dataErrors[name] = error;\n      this.setState({\n        fields: data,\n        fieldErrors: dataErrors\n      });\n    };\n\n    this.validate = () => {\n      const data = this.state.fields;\n      const dataErrors = this.state.fieldErrors;\n      const errorMessages = Object.keys(dataErrors).filter(key => dataErrors[key]);\n      return !data.name || !data.email || !data.message || errorMessages.length;\n    };\n  }\n\n  render() {\n    if (this.state._isLoading) {\n      return /*#__PURE__*/React.createElement(Loading, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }\n      });\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.onFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormField, {\n      name: \"name\",\n      onChange: this.onInputChange,\n      placeholder: \"Type your name...\",\n      validate: val => val ? false : \"Name is required\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      name: \"email\",\n      onChange: this.onInputChange,\n      placeholder: \"Type your email...\",\n      validate: val => isValidEmail(val) ? false : \"Email is invalid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(FormField, {\n      name: \"message\",\n      onChange: this.onInputChange,\n      placeholder: \"Write a message...\",\n      validate: val => val ? false : \"Message is required\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Send\",\n      className: \"btn mx-auto submit_btn\",\n      disabled: this.validate() || this.state._isLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 21\n      }\n    })));\n  }\n\n}\n\nexport default ContactForm;","map":{"version":3,"sources":["/home/gor/WebstormProjects/news-app/news-app-front/src/components/ContactForm/ContactForm.js"],"names":["React","isValidEmail","FormField","Loading","ContactForm","Component","state","_isLoading","fields","name","email","message","fieldErrors","onFormSubmit","e","preventDefault","randTime","Math","floor","random","setState","setTimeout","props","closeModal","onInputChange","value","error","data","Object","assign","dataErrors","validate","errorMessages","keys","filter","key","length","render","val"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './ContactForm.css';\nimport {isValidEmail} from \"../../helpers\";\nimport FormField from '../FormField/FormField'\nimport Loading from '../Loading/Loading';\nclass ContactForm extends React.Component{\n    state = {\n        _isLoading: false,\n        fields: {\n            name: '',\n            email: '',\n            message: ''\n        },\n        fieldErrors: {}\n    }\n    onFormSubmit = (e) => {\n        e.preventDefault();\n        const randTime = Math.floor((Math.random() * 1001)) + 1000;\n        this.setState({_isLoading: true},() => {\n            setTimeout(() => {\n                this.setState({_isLoading: false}, () => {\n                    this.props.closeModal();\n                })\n            },randTime);\n        })\n    }\n    onInputChange = ({name, value, error}) => {\n        const data = Object.assign({}, this.state.fields);\n        const dataErrors = Object.assign({},this.state.fieldErrors);\n\n        data[name] = value;\n        dataErrors[name] = error;\n\n        this.setState({fields: data, fieldErrors: dataErrors});\n    }\n    validate = () => {\n        const data = this.state.fields;\n        const dataErrors = this.state.fieldErrors;\n        const errorMessages = Object.keys(dataErrors).filter(key => dataErrors[key]);\n        return !data.name || !data.email || !data.message || errorMessages.length;\n    }\n    render(){\n        if(this.state._isLoading){\n            return (\n                <Loading />\n            )\n        }\n        return (\n            <div>\n                <form onSubmit={this.onFormSubmit}>\n                    <FormField\n                        name='name'\n                        onChange={this.onInputChange}\n                        placeholder='Type your name...'\n                        validate={(val) => (val ? false : \"Name is required\")}\n                    />\n                    <FormField\n                        name='email'\n                        onChange={this.onInputChange}\n                        placeholder='Type your email...'\n                        validate={(val) => (isValidEmail(val) ? false : \"Email is invalid\")}\n                    />\n                    <FormField\n                        name='message'\n                        onChange={this.onInputChange}\n                        placeholder='Write a message...'\n                        validate={(val) => (val ? false : \"Message is required\")}\n                    />\n                    <input\n                        type=\"submit\"\n                        value=\"Send\"\n                        className='btn mx-auto submit_btn'\n                        disabled={this.validate() || this.state._isLoading}/>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default ContactForm;"]},"metadata":{},"sourceType":"module"}