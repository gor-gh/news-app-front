{"ast":null,"code":"const LOCAL_STORAGE_KEY = 'my_key_for_tokens';\n\nclass Client {\n  constructor() {\n    this.localeStorageIsEnabled = typeof localStorage !== 'undefined';\n\n    if (this.localeStorageIsEnabled) {\n      this.token = localStorage.getItem(LOCAL_STORAGE_KEY);\n\n      if (!this.token) {\n        this.token = sessionStorage.getItem(LOCAL_STORAGE_KEY);\n      }\n    }\n  }\n\n  isLoggedIn() {\n    return !!this.token;\n  }\n\n  getNewses(successCallback) {\n    return fetch('https://serene-hamlet-84320.herokuapp.com/api/news', {\n      headers: {\n        token: this.token\n      }\n    }).then(this.checkStatus).then(res => res.json()).then(successCallback);\n  }\n\n  login(data, rememberMe) {\n    const dataString = JSON.stringify(data);\n    return fetch('https://serene-hamlet-84320.herokuapp.com/users/login', {\n      method: 'POST',\n      body: dataString,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(this.checkStatus).then(res => res.json()).then(json => this.setToken(json.token, rememberMe));\n  }\n\n  logout() {\n    return fetch('https://serene-hamlet-84320.herokuapp.com/users/logout', {\n      headers: {\n        token: this.token\n      }\n    }).then(this.checkStatus).then(res => res.json()).catch(err => {\n      console.log(err);\n    }).then(() => {\n      this.removeToken();\n    });\n  }\n\n  setToken(token, rememberMe) {\n    this.token = token;\n\n    if (this.localeStorageIsEnabled) {\n      if (rememberMe) {\n        localStorage.setItem(LOCAL_STORAGE_KEY, this.token);\n      } else {\n        sessionStorage.setItem(LOCAL_STORAGE_KEY, this.token);\n      }\n    }\n  }\n\n  removeToken() {\n    this.token = null;\n\n    if (this.localeStorageIsEnabled) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n      sessionStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      throw error;\n    }\n  }\n\n}\n\nexport const client = new Client();","map":{"version":3,"sources":["/home/gor/WebstormProjects/news-app/news-app-front/src/Client.js"],"names":["LOCAL_STORAGE_KEY","Client","constructor","localeStorageIsEnabled","localStorage","token","getItem","sessionStorage","isLoggedIn","getNewses","successCallback","fetch","headers","then","checkStatus","res","json","login","data","rememberMe","dataString","JSON","stringify","method","body","setToken","logout","catch","err","console","log","removeToken","setItem","removeItem","response","status","error","Error","statusText","client"],"mappings":"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","sourcesContent":["const LOCAL_STORAGE_KEY = 'my_key_for_tokens';\n\n\nclass Client{\n    constructor(){\n        this.localeStorageIsEnabled = (typeof localStorage !== 'undefined');\n        if(this.localeStorageIsEnabled){\n            this.token = localStorage.getItem(LOCAL_STORAGE_KEY)\n            if(!this.token) {\n                this.token = sessionStorage.getItem(LOCAL_STORAGE_KEY);\n            }\n        }\n    }\n    isLoggedIn() {\n      return !!this.token;\n    }\n    getNewses(successCallback){\n        return fetch('https://serene-hamlet-84320.herokuapp.com/api/news',{\n            headers: {\n                token: this.token\n            }\n        })\n            .then(this.checkStatus)\n            .then(res => res.json())\n            .then(successCallback)\n    }\n    login(data, rememberMe){\n        const dataString = JSON.stringify(data);\n        return fetch('https://serene-hamlet-84320.herokuapp.com/users/login',{\n            method: 'POST',\n            body: dataString,\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        })\n            .then(this.checkStatus)\n            .then(res => res.json())\n            .then(json => this.setToken(json.token,rememberMe))\n    }\n    logout(){\n\n        return fetch('https://serene-hamlet-84320.herokuapp.com/users/logout',{\n            headers: {\n                token: this.token\n            }\n        })\n            .then(this.checkStatus)\n            .then(res => res.json())\n            .catch(err => {\n                console.log(err);\n            })\n            .then(() => {\n                this.removeToken();\n            })\n\n    }\n    setToken(token, rememberMe) {\n        this.token = token;\n\n        if(this.localeStorageIsEnabled){\n            if(rememberMe){\n                localStorage.setItem(LOCAL_STORAGE_KEY,this.token);\n            } else {\n                sessionStorage.setItem(LOCAL_STORAGE_KEY,this.token);\n            }\n        }\n    }\n    removeToken(){\n        this.token = null;\n        if(this.localeStorageIsEnabled){\n            localStorage.removeItem(LOCAL_STORAGE_KEY);\n            sessionStorage.removeItem(LOCAL_STORAGE_KEY);\n        }\n    }\n    checkStatus (response) {\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        } else {\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            throw error;\n        }\n    }\n}\n\nexport const client = new Client();"]},"metadata":{},"sourceType":"module"}