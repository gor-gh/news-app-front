{"ast":null,"code":"const LOCAL_STORAGE_KEY = 'my_key_for_tokens';\n\nclass Client {\n  constructor() {\n    this.localeStorageIsEnabled = typeof localStorage !== 'undefined';\n\n    if (this.localeStorageIsEnabled) {\n      this.token = localStorage.getItem(LOCAL_STORAGE_KEY);\n\n      if (!this.token) {\n        this.token = sessionStorage.getItem(LOCAL_STORAGE_KEY);\n      }\n    }\n  }\n\n  isLoggedIn() {\n    return !!this.token;\n  }\n\n  login(data) {\n    const dataString = JSON.stringify(data);\n    return fetch('/users/login', {\n      method: 'POST',\n      body: dataString\n    }).then(this.checkStatus).then(res => res.json()).then(json => this.setToken(json.token));\n  }\n\n  setToken(token) {\n    this.token = token;\n\n    if (this.localeStorageIsEnabled) {\n      localStorage.setItem(LOCAL_STORAGE_KEY, this.token);\n    }\n  }\n\n  removeToken() {\n    this.token = null;\n\n    if (this.localeStorageIsEnabled) {\n      localStorage.removeItem(LOCAL_STORAGE_KEY);\n    }\n  }\n\n  checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n      return response;\n    } else {\n      const error = new Error(`HTTP Error ${response.statusText}`);\n      error.status = response.statusText;\n      error.response = response;\n      console.log(error);\n      throw error;\n    }\n  }\n\n}\n\nexport const client = new Client();","map":{"version":3,"sources":["/home/gor/WebstormProjects/news-app/news-app-front/src/Client.js"],"names":["LOCAL_STORAGE_KEY","Client","constructor","localeStorageIsEnabled","localStorage","token","getItem","sessionStorage","isLoggedIn","login","data","dataString","JSON","stringify","fetch","method","body","then","checkStatus","res","json","setToken","setItem","removeToken","removeItem","response","status","error","Error","statusText","console","log","client"],"mappings":"AAAA,MAAMA,iBAAiB,GAAG,mBAA1B;;AAGA,MAAMC,MAAN,CAAY;AACRC,EAAAA,WAAW,GAAE;AACT,SAAKC,sBAAL,GAA+B,OAAOC,YAAP,KAAwB,WAAvD;;AACA,QAAG,KAAKD,sBAAR,EAA+B;AAC3B,WAAKE,KAAL,GAAaD,YAAY,CAACE,OAAb,CAAqBN,iBAArB,CAAb;;AACA,UAAG,CAAC,KAAKK,KAAT,EAAgB;AACZ,aAAKA,KAAL,GAAaE,cAAc,CAACD,OAAf,CAAuBN,iBAAvB,CAAb;AACH;AACJ;AACJ;;AACDQ,EAAAA,UAAU,GAAG;AACX,WAAO,CAAC,CAAC,KAAKH,KAAd;AACD;;AACDI,EAAAA,KAAK,CAACC,IAAD,EAAM;AACP,UAAMC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAnB;AACA,WAAOI,KAAK,CAAC,cAAD,EAAgB;AACxBC,MAAAA,MAAM,EAAE,MADgB;AAExBC,MAAAA,IAAI,EAAEL;AAFkB,KAAhB,CAAL,CAIFM,IAJE,CAIG,KAAKC,WAJR,EAKFD,IALE,CAKGE,GAAG,IAAIA,GAAG,CAACC,IAAJ,EALV,EAMFH,IANE,CAMGG,IAAI,IAAI,KAAKC,QAAL,CAAcD,IAAI,CAACf,KAAnB,CANX,CAAP;AAOH;;AACDgB,EAAAA,QAAQ,CAAChB,KAAD,EAAQ;AACZ,SAAKA,KAAL,GAAaA,KAAb;;AAEA,QAAG,KAAKF,sBAAR,EAA+B;AAC3BC,MAAAA,YAAY,CAACkB,OAAb,CAAqBtB,iBAArB,EAAuC,KAAKK,KAA5C;AACH;AACJ;;AACDkB,EAAAA,WAAW,GAAE;AACT,SAAKlB,KAAL,GAAa,IAAb;;AACA,QAAG,KAAKF,sBAAR,EAA+B;AAC3BC,MAAAA,YAAY,CAACoB,UAAb,CAAwBxB,iBAAxB;AACH;AACJ;;AACDkB,EAAAA,WAAW,CAAEO,QAAF,EAAY;AACnB,QAAIA,QAAQ,CAACC,MAAT,IAAmB,GAAnB,IAA0BD,QAAQ,CAACC,MAAT,GAAkB,GAAhD,EAAqD;AACjD,aAAOD,QAAP;AACH,KAFD,MAEO;AACH,YAAME,KAAK,GAAG,IAAIC,KAAJ,CAAW,cAAaH,QAAQ,CAACI,UAAW,EAA5C,CAAd;AACAF,MAAAA,KAAK,CAACD,MAAN,GAAeD,QAAQ,CAACI,UAAxB;AACAF,MAAAA,KAAK,CAACF,QAAN,GAAiBA,QAAjB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,YAAMA,KAAN;AACH;AACJ;;AA9CO;;AAiDZ,OAAO,MAAMK,MAAM,GAAG,IAAI/B,MAAJ,EAAf","sourcesContent":["const LOCAL_STORAGE_KEY = 'my_key_for_tokens';\n\n\nclass Client{\n    constructor(){\n        this.localeStorageIsEnabled = (typeof localStorage !== 'undefined');\n        if(this.localeStorageIsEnabled){\n            this.token = localStorage.getItem(LOCAL_STORAGE_KEY)\n            if(!this.token) {\n                this.token = sessionStorage.getItem(LOCAL_STORAGE_KEY);\n            }\n        }\n    }\n    isLoggedIn() {\n      return !!this.token;\n    }\n    login(data){\n        const dataString = JSON.stringify(data);\n        return fetch('/users/login',{\n            method: 'POST',\n            body: dataString\n        })\n            .then(this.checkStatus)\n            .then(res => res.json())\n            .then(json => this.setToken(json.token))\n    }\n    setToken(token) {\n        this.token = token;\n\n        if(this.localeStorageIsEnabled){\n            localStorage.setItem(LOCAL_STORAGE_KEY,this.token)\n        }\n    }\n    removeToken(){\n        this.token = null;\n        if(this.localeStorageIsEnabled){\n            localStorage.removeItem(LOCAL_STORAGE_KEY);\n        }\n    }\n    checkStatus (response) {\n        if (response.status >= 200 && response.status < 300) {\n            return response;\n        } else {\n            const error = new Error(`HTTP Error ${response.statusText}`);\n            error.status = response.statusText;\n            error.response = response;\n            console.log(error);\n            throw error;\n        }\n    }\n}\n\nexport const client = new Client();"]},"metadata":{},"sourceType":"module"}